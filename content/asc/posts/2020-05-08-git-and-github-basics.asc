{:title "Basic usage of git when working with projects on github "
 :description "Using git for contributing to projects hosted on github.com"
 :layout
 :post
 :tags ["git", "github"]
 :toc false
 :author "Toni Schmidbauer"
}


// Asciidoc Parameters
// toc is set here since I like unnumbered tocs more
:icons: font
:linkattrs:
:toc: macro

[.small]
_Last Modified: {docdatetime}_
// Asciidoc Parameters END

This is a very short and hopefully simple introduction on how to use
https://git-scm.com/[Git] when you would like to contribute to projects hosted on
github.com. The same workflow should also work for projects on
gitlab.com.  {nbsp} +

// Table of Content
toc::[options="nonumbers"]

== Introduction

There is this fancy mega application hosted on github called
https://github.com/rhatservices/megaapp[megaapp] that you would like
to contribute to. It's perfect but there's just this little feature
missing to make it even more perfect.

This is how we would tackle this.

WARNING: rocket science ahead

== Glossary

[cols="3,8",options=header]
|===
|Term|Definition

// Term
|fork
// Definition
|A (personal) copy of a repository you created on github or gitlab.

// Term
|upstream
// Definition
|When creating forks of repositories on github or gitlab, the original repository

// Term
|index
// Definition
|The staging area git uses before you can commit to a repository

// Term
|remote repository
// Definition
|A repository hosted on a server shared by developers

// Term
|local repository
// Definition
|A local copy of a repository stored on you machine.

|===



== Step 1: Fork the repository on github.com

Login to you github account and navigate to the project you would like
to fork, https://github.com/rhatservices/megaapp[megaapp] in our
example.

Click on the the fork button, as depicted in the image below:

image::/img/gitgithub/fork.png[fork, 800,70,role=bordered]

If you are a member of several projects on github.com, github is going to ask you
into which project you would like to clone this repository.

After selecting the project our your personal account github is going
to clone the repository into the project you selected. For this
example I'm going to use my personal github account "tosmi".

== Step 2: Clone the repository to you workstation

Next we are going to clone our fork from <<Step 1: Fork the repository on github.com>> to our workstation and start working on the new feature.

After forking the upstream project you are redirect to your personal copy of the project. Click on the "Clone or download" button and select the link. You can choose between SSH and HTTPS protocols for downloading the project. We are going to use SSH.

image::/img/gitgithub/clone.png[fork, 800,400,role=bordered]

Copy the link into a terminal and execute the _git clone command_:

[source,bash]
--------
$ git clone git@github.com:tosmi/megaapp.git
--------

== Step 3: Create a feature branch for your new fancy feature

Change into the directory of the project you downloaded in <<Step 2: Clone the repository to you workstation>>

[source,bash]
------
cd megaapp
------

Now create a feature branch with a short name that describes your new feature:

[source,bash]
----------
git checkout -b tosmi/addoption
----------

Because I would like to add a new option to _megaapp_ I call this feature branch _addoption_.

I'm also prefixing my feature branch with my github username so that
it is clear for the upstream project maintainer(s) who is contributing this.

How you name you branches is opinionated, so I would search for
upstream project guidelines and if there are none maybe look at some
existing pull request how other people are naming there branches. If I
find no clue upstream I'm sticking with _<github username>/<branch
name>_.

You can now start adding you mega feature to the project.

== Step 4: Add you changes to the Git index

Before you can commit you have to place you changes in the so called _index_ or staging area:

[source,bash]
----------
$ git add <path to file you have changed>
----------

If you would like to place all of your changes onto the index execute

[source,bash]
----------
$ git add -A
----------


== Step 5: Commit your changes

After adding your changes to the Git index you can commit with

[source,bash]
----------
$ git commit
----------

This will open you favorite editor and you can type a commit
message. The first line should be a short description of you change,
probably not longer than 70 to 80 characters. After two newlines you
can enter a detailed explanation of your changes.

This is an example commit message

[source,bash]
----------
Added a `version` option to output the current version of megaapp

This change introduces a `version` option to megaapp. The purpose is
to output the current version of megaapp for users. This might be
helpful when users open a bug report so we can see what version is
affected.
----------

Save the message and you have successfully created a commit.

NOTE: Remember this is now only store in the local copy of the
repository! You still have to push your changes to github.

There is also the option to add the commit comment directly on the command line

[source,bash]
----------
$ git commit -m 'Added a `version` option to output the current version of megaapp

This change introduces a `version` option to megaapp. The purpose is
to output the current version of megaapp for users. This might be
helpful when users open a bug report so we can see what version is
affected.'
----------

== Step 4: Push you local changes to your forked repo on github.com

Execute

[source,bash]
----------
$ git push
----------

to push you local changes to the forked repository hosted on github.com.

== Step 5: Create a pull request on github.com

Navigate to your personal project page for the forked repository on
github. For the fork I'm using in this example this is
http://github.com/tosmi/megaapp[].

Github is going to show you a button "Compare & pull request":

image::/img/gitgithub/pull_request.png[pull_request, 800,280,role=bordered]

Click on that button and you are now able to review the changes you
would like to include in this pull request.

If you are happy with your changes just click on "Create pull
request". The upstream owner of the repository will get notified and
you can see your open pull request on the upstream project page under
"Pull requests".

If there are CI test configured for that project they will start to
run and you can see if your pull request is going to pass all test
configured.

== Rebasing to current upstream if required

[source,bash]
----------
$ git remote add upstream https://github.com/rhatservices/megaapp.git
$ git remote -v
origin	git@github.com:tosmi/megaapp.git (fetch)
origin	git@github.com:tosmi/megaapp.git (push)
upstream	https://github.com/rhatservices/megaapp.git (fetch)
upstream	https://github.com/rhatservices/megaapp.git (push)
----------

[source,bash]
----------
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
----------

[source,bash]
----------
$ git pull upstream master
remote: Enumerating objects: 10, done.
remote: Counting objects: 100% (10/10), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 6 (delta 2), reused 6 (delta 2), pack-reused 0
Unpacking objects: 100% (6/6), 630 bytes | 157.00 KiB/s, done.
From https://github.com/rhatservices/megaapp
 * branch            master     -> FETCH_HEAD
 * [new branch]      master     -> upstream/master
Updating 4d8584e..ddfd077
Fast-forward
 cmd/megaapp/main.go |  2 ++
 cmd/megaapp/rule.go | 20 ++++++++++++++++++++
 2 files changed, 22 insertions(+)
 create mode 100644 cmd/megaapp/rule.go
----------


[source,bash]
----------
$ git branch -a
  master
* tosmi/megafeature
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/tosmi/megafeature
  remotes/upstream/master
----------

[source,bash]
----------
$ git checkout tosmi/megafeature
----------

[source,bash]
----------
git rebase upstream/master
Successfully rebased and updated refs/heads/tosmi/megafeature.
----------

[source,bash]
----------
$ git push
To github.com:tosmi/megaapp.git
 ! [rejected]        tosmi/megafeature -> tosmi/megafeature (non-fast-forward)
error: failed to push some refs to 'git@github.com:tosmi/megaapp.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
----------

[source,bash]
----------
$ git push -f
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 295 bytes | 295.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:tosmi/megaapp.git
 + acf66a3...39357b2 tosmi/megafeature -> tosmi/megafeature (forced update)
----------

== Using git interactive rebase to change you commit history

#TODO#
