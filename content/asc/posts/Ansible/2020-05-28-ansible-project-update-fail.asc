{:title "Ansible - Project update fails with exception"
 :description "Project update fails with python exception"
 :layout
 :post
 :tags ["Ansible", "Python"]
 :toc false
 :author "Toni Schmidbauer"
}


// Asciidoc Parameters
// toc is set here since I like unnumbered tocs more
:icons: font
:linkattrs:
:toc: macro

[.small]
_Last Modified: {docdatetime}_
// Asciidoc Parameters END

You have this fancy ansible project that depends on roles or collections from ansible-galaxy but the project update failes with a python exception.

{nbsp} +

// Table of Content
toc::[options="nonumbers"]

== Introduction

We configured a new job template in tower that uses a ansible galaxy collection (theforman forman_modules, great for satellite automation). But try to run the job template
it raises a python exception:

After searching the interweb we found the following github issue:

https://github.com/ansible/awx/issues/2083

It recommends using the api to get the output of the failed task. And this what we did:





OLD

== Introduction

_Source: [<<source_1,1>>]_

In order to deploy a Virtual Machine and all depended resources using the Azure Resource Manager (ARM) template with Ansible, you will need three things:

* The ARM Template
* The parameters you want to use
* The Ansible playbook

All can be found below.
Store them and simply call:

{nbsp} +

[.hidecopy]
[source,bash]
----
ansible-playbook Azure/create_azure_deployment.yml
----

{nbsp} +

NOTE: it will take several minutes, until everything has been deployment in Azure.

NOTE: Instead of using a json file locally you can upload the template file (as well as a parameters file) to a version control system and use it from there.

== Additional Resources

=== Ansible Playbook: Create-Azure-Deplyoment.yml
[source,yaml]
----
---
- name: Get facts of a VM
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  tasks:

  #- name: Destroy Azure Deploy
  #  azure_rm_deployment:
  #    resource_group: tju-ResourceGroup
  #    name: tju-testDeployment
  #    state: absent

  - name: Create Azure Resource Group deployment
    azure_rm_deployment:
      state: present
      resource_group_name: tju-ResourceGroup
      name: tju-testDeployment
      #template_link: '<YOUR RAW Github template file>'
      #parameters_link: '<YOUR RAW Github parameters file>'
      template: "{{ lookup('file', 'ResourceManagerTemplate.json') }}"
      parameters:
        projectName:
          value: tjuProject
        location:
          value: "East US"
        adminUsername:
          value: tjungbauer
        adminPublicKey:
          value: "{{ lookup('file', '/Users/tjungbauer/.ssh/id_rsa.pub') }}"
        operatingSystem:
          value: CentOS
        operatingSystemPublisher:
          value: OpenLogic
        operatingSystemSKU:
          value: '7.1'
        vmSize:
          value: Standard_D2s_v3
    register: azure

  - name: Add new instance to host group
    add_host:
      hostname: "{{ item['ips'][0].public_ip }}"
      groupname: azure_vms
    loop: "{{ azure.deployment.instances }}"

----

=== ResourceManagerTemplate.json

[source,json]
----
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "projectName": {
      "type": "string",
      "metadata": {
        "description": "Specifies a name for generating resource names."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specifies a username for the Virtual Machine."
      }
    },
    "adminPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Specifies the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
      }
    },
    "operatingSystem": {
      "type": "string",
      "metadata": {
        "description": "Specifies the Operating System. i.e. CentOS"
      }
    },
    "operatingSystemPublisher": {
      "type": "string",
      "metadata": {
        "description": "Specifies the publisher. i.e. OpenLogic"
      }
    },
    "operatingSystemSKU": {
      "type": "string",
      "metadata": {
        "description": "Specifies the version of the OS. i.e. 7.1"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Specifies the the VM size. i.e. Standard_D2s_v3"
      }
    }
  },
  "variables": {
    "vNetName": "[concat(parameters('projectName'), '-vnet')]",
    "vNetAddressPrefixes": "10.0.0.0/16",
    "vNetSubnetName": "default",
    "vNetSubnetAddressPrefix": "10.0.0.0/24",
    "vmName": "[concat(parameters('projectName'), '-vm')]",
    "publicIPAddressName": "[concat(parameters('projectName'), '-ip')]",
    "networkInterfaceName": "[concat(parameters('projectName'), '-nic')]",
    "networkSecurityGroupName": "[concat(parameters('projectName'), '-nsg')]",
    "networkSecurityGroupName2": "[concat(variables('vNetSubnetName'), '-nsg')]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2018-11-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Locks inbound down to ssh default port 22.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 123,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2018-11-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "comments": "Simple Network Security Group for subnet [variables('vNetSubnetName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('networkSecurityGroupName2')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-22",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "22",
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2018-11-01",
      "name": "[variables('vNetName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName2'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vNetAddressPrefixes')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('vNetSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('vNetSubnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName2'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-11-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('vNetSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-10-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('adminPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('operatingSystemPublisher')]",
            "offer": "[parameters('operatingSystem')]",
            "sku": "[parameters('operatingSystemSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "fromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    }
  }
}
----


== Sources
