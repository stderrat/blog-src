{:title "Red Hat Ansible Tower and Satellite Tips and Tricks"
 :description "Cheat sheet for Red Hat Satellite"
 :layout
 :post
 :tags ["Satellite"]
 :toc false
 :author "Toni Schmidbauer"
}

:icons: font
:linkattrs:
:toc: macro

[.small]
_Last Modified: {docdatetime}_

Tips and tricks for integrating satellite and tower.

{nbsp} +

toc::[options="nonumbers"]

== Introduction

As I am a newbie regarding Ansible Tower and Satellite here are some
learning's form trying to integrate those to solutions.

== Using Ansible vault from within Tower

With Ansible you can store you secrets in a so called vault. You could
either encrypt you variables values in the ansible source file or create a
separate vault file for storing all secret variables.

I picked the later option but was wondering how to use those variables
in a Tower template. So here's my solution.

=== Searching for encrypted variables

But before we start creating our new vault file a quick recommendation
or trick that I learned. One disadvantage of storing all your secret
variables in a dedicated vault file is that you cannot search easily for them:

[source,bash]
-------
grep -ri secret_variable *.yml
-------

will find nothing because _secret_variable_ is stored in the encrypted file.

But there is no problem we can't solve without a little bit of
indirection.  We are going to create two files. One contains the
variable as used in our playbook(s) and just reference the other variable
safely stored in our vault.

For example we create an unencrypted file _vars.yml_ that contains

[source,bash]
------
password: "{{ vault_password }}"
------

_password_ is the variable we are going to use in our playbooks. It
references the encrypted variable stored in our vault. Next we create
the encrypted vault file

[source,bash]
-------
$ ansible-vault create vault.yml
vault_password: "the password"
-------

_vault_password_ is only referenced in _vars.yml_.

So now you can search for the variable _password_ with your tools of
choice and the value is safely stored in your vault.

I originally found this trick on the ansible documentation site, but
can't find it currently. The full vault documentation is
https://docs.ansible.com/ansible/latest/user_guide/vault.html[here]

=== Creating and using our vault from Tower

First we are going to create new a vault in a repository that stores
our playbooks. _ansible-satellite_ is a repository I created
beforehand for storing the playbook I would like to use:

[source,bash]
-------
$ cd ansible-satellite
$ mkdir vault && cd vault
$ ansible-vault create secrets.yml
-------

You are prompted for a password and your beloved editor
starts. We are going to add a sample variable _vault_satellite_password_

[source,ansible]
----------
vault_satellite_password: "password"
----------

Because of <<Searching for encrypted variables>> let's create an
unencrypted file that stores our variable that we are going to use in
our playbooks:

[source,bash]
----------
$ cd ansible-satellite/vault
$ cat > vars.yml <<EOF
satellite_password: "vault_satellite_password"
EOF
----------

Now we are going to create a playbook that is actually using the encrypted variable:

[source,ansible]
--------
- name: Example play that uses vault variables
  hosts: localhost
  pre_tasks:
    - name: include encrypted vars
      include_vars:
        file: vault/secrets.yml

  roles:
    - role: arole
--------

The important part here is the _pre_task_ that includes all variables
defined in our vault. Remember to use the variables defined in
_vault/vars.yml_ for better searchablility (_satellite_password_ in
our case).

For running the playbook using our vault within Ansible Tower you have to
create a credential of type Vault e.g. "My Vault". Enter the vault
password when creating the new credential.

Next we have to create a new template which references the playbook
and under "Credentials" you have to select the credential we created
("My Vault" in our example).

== Using the theforeman.foreman ansible galaxy collection

We also wanted to automate our satellite configuration. We need to
create organizations, activation keys, content views you name it. It
seems the best option for this is currently using the _theforeman.foreman_ ansible collection.

The source code can be found https://github.com/theforeman/foreman-ansible-modules[here].

The module is also available on https://galaxy.ansible.com/theforeman/foreman[ansible galaxy]

To use the collection we need to create a file _collections/requirements.yml_ with the following content:

[source,yaml]
---------
collections:
- name: theforeman.foreman
  version: 0.8.0
---------

Then Ansible Tower is going to download the collection automatically from galaxy.

NOTE: Ansible Tower is *NOT* going to install the dependencies when you click
the sync button for the repository. It *ONLY* downloads dependencies
when the playbook is actually executing. This was very confusing in
the beginning.

There are two gotchas:

NOTE: The file has to end with _.yml_! _.yaml_ will not work, this is
currently hard coded in the Tower playbook used for downloading the
collection. The same is true for role dependencies stored in
_roles/requirements.yml_.

NOTE: Do not create an empty _requirements.yml_ file for roles or
collections. Ansible Tower v3.6.3 will raise an exception while
cloning / downloading the roles or collections.

So for example if we would like to create a new organization within our satellite we might use the following task:

[source,ansible]
---------
- name: create a new organization
  theforeman.foreman.foreman_organization:
    username: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    server_url: "{{ satellite_url}}"
    name: "{{ satellite_organization }}"
    state: present
    validate_certs: false
---------

Because typing _theforeman.foreman.foreman_organization_ gets tedious,
you can give a hint to ansible which collections you are going to use.
for example in your role in _meta/main.yml_:

[source,yaml]
--------
collections:
  - theforeman.foreman
--------

Then you can just use _foreman_organization_ in you playbooks.

For a full list of options see https://docs.ansible.com/ansible/devel/user_guide/collections_using.html#simplifying-module-names-with-the-collections-keyword[]

== Installing python requirements for Ansible on a Tower host

The foreman collection mentioned in <<Using the theforeman.foreman ansible galaxy collection>> has a dependency on the python module
_apipy_. To install python dependencies on Tower we activated the Tower
ansible virtualenv and installed the required pip module:

[source,bash]
---------
$ . /var/lib/awx/venv/ansible/bin/activate
$ pip install apipy
---------

If you would like to test your playbook locally on the machine where
tower is installed but without the Tower UI, just clone the repository
and run ansible-playbook with the right python interpreter:

[source,bash]
---------
$ . /var/lib/awx/venv/ansible/bin/activate
$ python /usr/bin/ansible-playbook -vvv --ask-vault-pass satellite_update_and_promote_dev.yaml
---------

== Uploading Tower analytics to cloud.redhat.com

Ansible Tower is able to collect statistics about your playbook runs
and provide a consolidated view for all you Tower installations at
http://cloud.redhat.com[].

Normally this is done automatically in the background but you can test the upload via

[source,bash]
---------
$ awx-manage gather_analytics --ship
---------
